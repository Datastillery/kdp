# Order is not consistent when querying
# Trailing new lines cause duplicate data

CREATE TABLE pauls_haircut (
  request_time timestamp,
  style varchar,
  stylist varchar
)
WITH (
  format = 'JSON'
);

#Partitioned Data
CREATE TABLE page_views (
  user_id bigint,
  page_url varchar,
  country varchar
)
WITH (
  format = 'JSON',
  partitioned_by = ARRAY['country']
);

CALL system.create_empty_partition(
    schema_name => 'default',
    table_name => 'page_views',
    partition_columns => ARRAY['country'],
    partition_values => ARRAY['USA']);

CALL system.create_empty_partition(
    schema_name => 'default',
    table_name => 'page_views',
    partition_columns => ARRAY['country'],
    partition_values => ARRAY['CAN']);


# Nested Data
CREATE TABLE misc_1 (
  name varchar,
  data map<int, int>
)
WITH (
  format = 'JSON'
);

select * from misc_1 where name = 'hello' and data[43] = 1;

# Nested Data with ARRAY
CREATE TABLE misc_4 (
  name varchar,
  data ARRAY(map<varchar, int>)
)
WITH (
  format = 'JSON',
  external_location='s3a://jarred-presto-write-spike/hive-s3/misc_4/'
);

#{"name":"hello","data":[{"43":2},{"14": 1}]},
#{"name":"more","data":[{"12":2}]},

#if not all rows have a key, the select will fail, try something like
select coalesce(element_at(data[1], '43'), 3) from misc_4;

#if not all rows have array index the select will fail.
select data[1]['43'] from misc_4 where name = 'hello';
select data[2]['12'] from misc_4 where cardinality(data) > 1;

# External Table.  Able to use the same underlying json files with a different schema.
create table pauls_life (
    request_time timestamp,
    styling_profiling varchar
)
with (
    format = 'JSON',
    external_location='s3a://jarred-presto-write-spike/hive-s3/pauls_haircut/'
);




CREATE TABLE resources (
  resource_number int,
  name_of_soul varchar
)
WITH (
  format = 'JSON'
);

CREATE TABLE resource_resources (
  resource_number int,
  resource_name varchar
)
WITH (
  format = 'JSON'
);

create table books (
    latest_revision int,
    revision int,
    title varchar,
    publish_country varchar,
    by_statement varchar,
    publish_date varchar,
    number_of_pages int
)
with (
    format = 'JSON',
    external_location='s3a://jarred-presto-write-spike/hive-s3/crap/'
);

PRESTO_PAGER= presto --catalog hive --schema default --execute 'select count(1) from books;' > /tmp/books-count.out
PRESTO_PAGER= presto --catalog hive --schema default --execute 'select * from books order by title desc;' > /tmp/books-sort.out




+  worker.properties: |
+    coordinator=false
+    node-scheduler.include-coordinator=true
+    http-server.http.port=8080
+    query.max-memory=1GB
+    query.max-memory-per-node=1GB
+    discovery.uri=http://presto-coordinator:8080



hive.properties:
hive.security=sql-standard

create table cota_vehicle_positions (
    id varchar,
    is_deleted boolean,
    vehicle row(
      current_status varchar,
      timestamp BIGINT,
      position row(
        latitude double,
        longitude double,
        speed double
      ),
      vehicle row(
        yvprafr_cyngr varchar
      )
      )
)
with (
    format = 'JSON',
    external_location='s3a://streaming-data-aggregator-skeleton-sandbox/hive-s3/cota-vehicle-positions/'
);
